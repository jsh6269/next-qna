// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  questions     Question[]
  answers       Answer[]
  comments      Comment[]
  likes         Like[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tags      Tag[]
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  answers   Answer[]
  comments  Comment[]
  likes     Like[]
}

model Answer {
  id         String    @id @default(cuid())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  questionId String
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  comments   Comment[]
  likes      Like[]
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId   String?
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[]
}

model Like {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId   String?
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())

  @@unique([userId, questionId])
  @@unique([userId, answerId])
} 